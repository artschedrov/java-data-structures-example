package DataStructures;

import java.util.ArrayList;
import java.util.List;

/**
 *  Реализация List интерфейса на основе динамически изменяемого массива.
 *  В большинстве случаев, лучшая возможная реализация List интерфейса по потреблению памяти и производительности.
 *  В крайне редких случаях, когда требуются частые вставки в начало или середину списка с очень малым
 *  количеством перемещений по списку,
 *  LinkedList будет выигрывать в производительности (но советую в этих случаях использовать TreeList от apache).
 *
 *  Данная коллекция лишь настройка над массивом + переменная хранящая size списка. Внутри просто
 *  массив, который пересоздается каждый раз когда нет места для добавления нового элемента. В
 *  случае, добавления или удаления элемента внутри коллекции весь хвост сдвигается в памяти на
 *  новое место. К счастью, копирование массива при увеличении емкости или при добавлении/удалении
 *  элементов производится быстрыми нативными/системными методами.
 */

public class TheArrayList {
    public static void main(String[] args) {

//        Immutable object is modified
//        List<String> colorsUnmodifided = List.of(
//                "blue",
//                "yellow"
//        );
//
//        colorsUnmodifided.add("red");

        List<String> colors = new ArrayList<>();

        colors.add("red");
        colors.add("green");
        colors.forEach(System.out::println);
    }
}
